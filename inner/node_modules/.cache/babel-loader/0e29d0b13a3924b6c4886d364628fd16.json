{"ast":null,"code":"var _jsxFileName = \"/home/avirup/chatapp/chat-app-master/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport io from \"socket.io-client\";\nimport logo from \"./assets/chat.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CreateUser from './components/CreateUser';\nimport OnlineUsers from './components/OnlineUsers';\nimport MessagesControl from './components/MessagesControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(`http://localhost:5000`);\n\nfunction App() {\n  _s();\n\n  const [step, setStep] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1, username2) => {\n    return [username1, username2].sort().join(\"-\");\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n    socket.emit(\"new_user\", username);\n    const a = Math.ceil(Math.random() * 8) + '.png';\n    setAvatar(a);\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onUserSelect = username => {\n    setReceiver(username);\n    receiverRef.current = username;\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onChatClose = () => {\n    setStep(1);\n    receiverRef.current = null;\n  };\n\n  const gotoBottom = () => {\n    const el = document.querySelector(\".message-area ul\");\n\n    if (el) {\n      el.scrollTop = el.scrollHeight;\n    }\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const data = {\n      sender: username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false\n    }; //here we are sending messages\n\n    socket.emit(\"send_message\", data); //Main Model: Generate a unique key for each pair of sender-receiver\n    //eg: sender: Koushan, receiver:Avirup => key: \"Avirup-Koushan\" (Sorted in alphabetical order and joined with a hiphen)\n\n    const key = sortNames(username, receiver);\n    const tempGroupMessage = { ...groupMessage\n    };\n\n    if (key in tempGroupMessage) {\n      tempGroupMessage[key] = [...tempGroupMessage[key], { ...data,\n        view: true\n      }];\n    } else {\n      tempGroupMessage[key] = [{ ...data,\n        view: true\n      }];\n    }\n\n    setGroupMessage({ ...tempGroupMessage\n    });\n\n    if (media !== null) {\n      setMedia(null);\n    }\n\n    setMessage(\"\");\n    console.log(groupMessage);\n    console.log(message);\n  };\n\n  const checkUnseenMessages = receiver => {\n    const key = sortNames(username, receiver);\n    let unseenMessages = [];\n\n    if (key in groupMessage) {\n      unseenMessages = groupMessage[key].filter(mgs => !mgs.view);\n    }\n\n    return unseenMessages.length;\n  };\n\n  useEffect(() => {\n    socket.on(\"all_users\", users => {\n      console.log({\n        users\n      });\n      setUsers(users);\n    });\n    socket.on(\"new_message\", data => {\n      console.log(data);\n      console.log({\n        rec: receiverRef.current,\n        data\n      });\n      setGroupMessage(prevGroupMessage => {\n        const messages = { ...prevGroupMessage\n        };\n        const key = sortNames(data.sender, data.receiver);\n\n        if (receiverRef.current === data.sender) {\n          data.view = true;\n        }\n\n        if (key in messages) {\n          messages[key] = [...messages[key], data];\n        } else {\n          messages[key] = [data];\n        }\n\n        return { ...messages\n        };\n      });\n    });\n  }, []);\n  useEffect(() => {\n    //for updating view count of selected user(receiver)\n    updateViewMessage();\n  }, [receiver]);\n\n  const updateViewMessage = () => {\n    const key = sortNames(username, receiver);\n\n    if (key in groupMessage) {\n      const messages = groupMessage[key].map(msg => !msg.view ? { ...msg,\n        view: true\n      } : msg);\n      groupMessage[key] = [...messages];\n      setGroupMessage({ ...groupMessage\n      });\n    }\n  };\n\n  useEffect(() => {\n    const key = sortNames(username, receiver);\n\n    if (key in groupMessage) {\n      if (groupMessage[key].length > 0) {\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]); //console.log(groupMessage);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Chatter-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-name\",\n        children: \"Chatter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-system\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [\n        /* step1 ask user name and password*/\n        step === 0 ? /*#__PURE__*/_jsxDEV(CreateUser, {\n          onCreateUser: onCreateUser,\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this) : null,\n        /* step2 shoe all available users*/\n        step === 1 ? /*#__PURE__*/_jsxDEV(OnlineUsers, {\n          onUserSelect: onUserSelect,\n          users: users,\n          username: username,\n          checkUnseenMessages: checkUnseenMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this) : null,\n        /* step3 select user and switch to chat window*/\n        step === 2 ? /*#__PURE__*/_jsxDEV(MessagesControl, {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          sendMessage: sendMessage,\n          groupMessage: groupMessage,\n          sortNames: sortNames,\n          username: username,\n          receiver: receiver,\n          setMedia: setMedia,\n          onChatClose: onChatClose,\n          media: media\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oheZkqF1Y4yD47G47rojuN+yBXo=\");\n\n_c = App;\nexport default App; //54:14\n//1:06:00\n//2:14:56\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/avirup/chatapp/chat-app-master/src/App.js"],"names":["io","logo","useEffect","useRef","useState","CreateUser","OnlineUsers","MessagesControl","socket","App","step","setStep","username","setUsername","receiver","setReceiver","avatar","setAvatar","media","setMedia","users","setUsers","message","setMessage","groupMessage","setGroupMessage","receiverRef","sortNames","username1","username2","sort","join","onCreateUser","console","log","emit","a","Math","ceil","random","prevStep","onUserSelect","current","onChatClose","gotoBottom","el","document","querySelector","scrollTop","scrollHeight","sendMessage","e","preventDefault","data","sender","view","key","tempGroupMessage","checkUnseenMessages","unseenMessages","filter","mgs","length","on","rec","prevGroupMessage","messages","updateViewMessage","map","msg","target","value"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport io from \"socket.io-client\";\nimport logo from \"./assets/chat.png\"\nimport { useEffect, useRef, useState } from \"react\";\nimport CreateUser from './components/CreateUser';\nimport OnlineUsers from './components/OnlineUsers';\nimport MessagesControl from './components/MessagesControl';\n\nconst socket = io(`http://localhost:5000`);\n\nfunction App() {\n\n  const [step, setStep] = useState(0);\n  const [username,setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1,username2) => {\n    return [username1,username2].sort().join(\"-\");\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n\n    socket.emit(\"new_user\", username);\n    const a = Math.ceil(Math.random() * 8) + '.png';\n    setAvatar(a);\n\n    setStep(prevStep => prevStep + 1);\n  }\n\n  const onUserSelect = (username) => {\n    setReceiver(username);\n    receiverRef.current = username; \n    setStep(prevStep => prevStep + 1);\n  }\n\n  const onChatClose = () =>{\n    setStep(1);\n    receiverRef.current=null;\n  }\n\n  const gotoBottom = () =>{\n    const el = document.querySelector(\".message-area ul\");\n    if(el){\n      el.scrollTop = el.scrollHeight;\n    }\n  }\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    const data = {\n      sender : username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false,\n    };\n\n    //here we are sending messages\n    socket.emit(\"send_message\",data);\n    \n    //Main Model: Generate a unique key for each pair of sender-receiver\n    //eg: sender: Koushan, receiver:Avirup => key: \"Avirup-Koushan\" (Sorted in alphabetical order and joined with a hiphen)\n    const key = sortNames(username, receiver);\n    const tempGroupMessage = {...groupMessage};\n\n    if(key in tempGroupMessage)\n    {\n      tempGroupMessage[key] = [...tempGroupMessage[key], {...data, view: true}];\n    }\n    else{\n      tempGroupMessage[key] = [{...data, view:true}];\n    }\n\n    setGroupMessage({ ...tempGroupMessage });\n\n    if(media !== null){\n      setMedia(null);\n    }\n\n    setMessage(\"\");\n\n     console.log(groupMessage);\n\n     console.log(message);     \n  };\n\n  const checkUnseenMessages = (receiver)=>{\n    \n    const key = sortNames(username, receiver);\n    let unseenMessages = [];\n    if(key in groupMessage){\n      unseenMessages = groupMessage[key].filter(mgs => !mgs.view);\n    }\n\n    return unseenMessages.length;\n  }\n\n  useEffect(()=>{\n    socket.on(\"all_users\", (users) => {\n      console.log({users});\n      setUsers(users);\n    });\n\n    socket.on(\"new_message\", (data)=>{\n      console.log(data);\n\n       console.log({rec: receiverRef.current,data});\n\n      setGroupMessage((prevGroupMessage) => {\n        const messages = {...prevGroupMessage};\n        const key = sortNames(data.sender,data.receiver);\n\n        if(receiverRef.current === data.sender){\n          data.view = true;\n        }\n\n\n        if(key in messages){\n          messages[key] = [...messages[key], data];\n        }\n        else{\n          messages[key] = [data];\n        }\n\n        return {...messages};\n      })\n    })\n  }, []);\n\n  useEffect(()=>{\n    //for updating view count of selected user(receiver)\n    updateViewMessage();\n  },[receiver]);\n\n  const updateViewMessage = ()=>{\n    const key = sortNames(username,receiver);\n    if(key in groupMessage){\n      const messages = groupMessage[key].map(msg => !msg.view ? {...msg, view:true} : msg);\n\n      groupMessage[key] = [...messages];\n\n      setGroupMessage({...groupMessage});\n    }\n  }\n\n  useEffect(() => {\n    const key = sortNames(username,receiver);\n    if(key in groupMessage){\n      if(groupMessage[key].length > 0){\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]);\n\n  //console.log(groupMessage);\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <img src={logo} alt=\"Chatter-logo\" />\n        <div className=\"app-name\">Chatter</div>\n      </header>\n      <div className=\"chat-system\">\n        <div className=\"chat-box\">\n          {\n            /* step1 ask user name and password*/\n            step === 0 ? (\n              <CreateUser onCreateUser = {onCreateUser}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}/>) : null}\n          {/* step2 shoe all available users*/\n            step === 1 ? (\n              <OnlineUsers onUserSelect = {onUserSelect}\n              users = {users}\n              username = {username}\n              checkUnseenMessages={checkUnseenMessages}\n              />\n            ) : null\n          }\n          {/* step3 select user and switch to chat window*/\n            step === 2 ? (\n              <MessagesControl\n              value = {message}\n              onChange =  {(e)=>setMessage(e.target.value)}\n              sendMessage = {sendMessage}\n              groupMessage = {groupMessage}\n              sortNames = {sortNames}\n              username = {username}\n              receiver = {receiver}\n              setMedia = {setMedia}\n              onChatClose={onChatClose}\n              media = {media}\n              />\n            ) : null\n          }\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//54:14\n//1:06:00\n//2:14:56"]},"metadata":{},"sourceType":"module"}