{"ast":null,"code":"var _jsxFileName = \"/home/avirup/chatapp/chat-app-master/inner/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport io from \"socket.io-client\";\nimport logo from \"./assets/chat.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CreateUser from './components/CreateUser';\nimport OnlineUsers from './components/OnlineUsers';\nimport MessagesControl from './components/MessagesControl';\nimport Public from './components/Public';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(`http://192.168.0.8:5000`);\n\nfunction App() {\n  _s();\n\n  const [step, setStep] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n  const [offline, setOffline] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1, username2) => {\n    return [username1, username2].sort().join(\"-\");\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n    socket.emit(\"new_user\", username);\n    const a = Math.ceil(Math.random() * 8) + '.png';\n    setAvatar(a);\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onUserSelect = username => {\n    setReceiver(username);\n    receiverRef.current = username;\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onPublicSelect = () => {\n    setReceiver(\"public\");\n    receiverRef.current = \"public\";\n    setStep(prevStep => prevStep + 2);\n  };\n\n  const onChatClose = () => {\n    setStep(1);\n    receiverRef.current = null;\n  };\n\n  const gotoBottom = () => {\n    const el = document.querySelector(\".message-area ul\");\n\n    if (el) {\n      el.scrollTop = el.scrollHeight;\n    }\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const data = {\n      sender: username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false\n    }; //here we are sending messages\n\n    socket.emit(\"send_message\", data); //Main Model: Generate a unique key for each pair of sender-receiver\n    //eg: sender: Koushan, receiver:Avirup => key: \"Avirup-Koushan\" (Sorted in alphabetical order and joined with a hiphen)\n\n    if (receiver !== \"public\") //Else unusual storage of data\n      {\n        const key = sortNames(username, receiver);\n        const tempGroupMessage = { ...groupMessage\n        };\n\n        if (key in tempGroupMessage) {\n          tempGroupMessage[key] = [...tempGroupMessage[key], { ...data,\n            view: true\n          }];\n        } else {\n          tempGroupMessage[key] = [{ ...data,\n            view: true\n          }];\n        }\n\n        setGroupMessage({ ...tempGroupMessage\n        });\n\n        if (media !== null) {\n          setMedia(null);\n        }\n\n        setMessage(\"\");\n        console.log(groupMessage);\n        console.log(message);\n      }\n\n    setMessage(\"\");\n  };\n\n  useEffect(() => {\n    socket.on(\"all_users\", users => {\n      console.log({\n        users\n      });\n      setUsers(users);\n    });\n    socket.on(\"offline_users\", newoff => {\n      //console.log({users});\n      setOffline(newoff);\n    });\n    socket.on(\"load_messages\", oldMessages => {\n      console.log(oldMessages);\n      setGroupMessage(oldMessages);\n    });\n    socket.on(\"new_message\", data => {\n      console.log(data);\n      console.log({\n        rec: receiverRef.current,\n        data\n      });\n\n      if (data.receiver === \"public\") {\n        setGroupMessage(prevGroupMessage => {\n          const messages = { ...prevGroupMessage\n          };\n          const key = \"public\";\n\n          if (receiverRef.current === \"public\") {\n            data.view = true;\n          }\n\n          if (key in messages) {\n            messages[key] = [...messages[key], data];\n          } else {\n            messages[key] = [data];\n          }\n\n          return { ...messages\n          };\n        });\n      } else {\n        setGroupMessage(prevGroupMessage => {\n          const messages = { ...prevGroupMessage\n          };\n          const key = sortNames(data.sender, data.receiver);\n\n          if (receiverRef.current === data.sender) {\n            data.view = true;\n          }\n\n          if (key in messages) {\n            messages[key] = [...messages[key], data];\n          } else {\n            messages[key] = [data];\n          }\n\n          return { ...messages\n          };\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    //for updating view count of selected user(receiver)\n    updateViewMessage();\n  }, [receiver]);\n\n  const updateViewMessage = () => {\n    let key;\n\n    if (receiver === \"public\") {\n      key = \"public\";\n    } else {\n      key = sortNames(username, receiver);\n    }\n\n    if (key in groupMessage) {\n      const messages = groupMessage[key].map(msg => !msg.view ? { ...msg,\n        view: true\n      } : msg);\n      groupMessage[key] = [...messages];\n      setGroupMessage({ ...groupMessage\n      });\n    }\n  };\n\n  useEffect(() => {\n    let key;\n    if (receiver == \"public\") key = \"public\";else key = sortNames(username, receiver);\n\n    if (key in groupMessage) {\n      if (groupMessage[key].length > 0) {\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]); //console.log(groupMessage);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Chatter-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-name\",\n        children: \"Chatter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-system\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [\n        /* step1 ask user name and password*/\n        step === 0 ? /*#__PURE__*/_jsxDEV(CreateUser, {\n          onCreateUser: onCreateUser,\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this) : null,\n        /* step2 shoe all available users*/\n        step === 1 ? /*#__PURE__*/_jsxDEV(OnlineUsers, {\n          onUserSelect: onUserSelect,\n          onPublicSelect: onPublicSelect,\n          users: users,\n          offline: offline,\n          username: username,\n          avatar: avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this) : null,\n        /* step3 select user and switch to chat window*/\n        step === 2 ? /*#__PURE__*/_jsxDEV(MessagesControl, {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          sendMessage: sendMessage,\n          groupMessage: groupMessage,\n          sortNames: sortNames,\n          username: username,\n          receiver: receiver,\n          setMedia: setMedia,\n          onChatClose: onChatClose,\n          media: media,\n          avatar: avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this) : null,\n        /* step3 select user and switch to chat window*/\n        step === 3 ? /*#__PURE__*/_jsxDEV(Public, {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          sendMessage: sendMessage,\n          groupMessage: groupMessage,\n          sortNames: sortNames,\n          username: username,\n          receiver: receiver,\n          setMedia: setMedia,\n          onChatClose: onChatClose,\n          media: media,\n          avatar: avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"G3gqs6VduAY38NzQF9VPYwkbAzs=\");\n\n_c = App;\nexport default App; //54:14\n//1:06:00\n//2:14:56\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/avirup/chatapp/chat-app-master/inner/src/App.js"],"names":["io","logo","useEffect","useRef","useState","CreateUser","OnlineUsers","MessagesControl","Public","socket","App","step","setStep","username","setUsername","receiver","setReceiver","avatar","setAvatar","media","setMedia","users","setUsers","offline","setOffline","message","setMessage","groupMessage","setGroupMessage","receiverRef","sortNames","username1","username2","sort","join","onCreateUser","console","log","emit","a","Math","ceil","random","prevStep","onUserSelect","current","onPublicSelect","onChatClose","gotoBottom","el","document","querySelector","scrollTop","scrollHeight","sendMessage","e","preventDefault","data","sender","view","key","tempGroupMessage","on","newoff","oldMessages","rec","prevGroupMessage","messages","updateViewMessage","map","msg","length","target","value"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport io from \"socket.io-client\";\nimport logo from \"./assets/chat.png\"\nimport { useEffect, useRef, useState } from \"react\";\nimport CreateUser from './components/CreateUser';\nimport OnlineUsers from './components/OnlineUsers';\nimport MessagesControl from './components/MessagesControl';\nimport Public from './components/Public';\n\n\nconst socket = io(`http://192.168.0.8:5000`);\n\nfunction App() {\n\n  const [step, setStep] = useState(0);\n  const [username,setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n\n  const [offline, setOffline] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1,username2) => {\n    return [username1,username2].sort().join(\"-\");\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n\n    socket.emit(\"new_user\", username);\n    const a = Math.ceil(Math.random() * 8) + '.png';\n    setAvatar(a);\n\n    setStep(prevStep => prevStep + 1);\n  }\n\n  const onUserSelect = (username) => {\n    setReceiver(username);\n    receiverRef.current = username; \n    setStep(prevStep => prevStep + 1);\n  }\n\n  const onPublicSelect = () => {\n    setReceiver(\"public\");\n    receiverRef.current = \"public\"; \n    setStep(prevStep => prevStep + 2);\n  }\n\n  const onChatClose = () =>{\n    setStep(1);\n    receiverRef.current=null;\n  }\n\n  const gotoBottom = () =>{\n    const el = document.querySelector(\".message-area ul\");\n    if(el){\n      el.scrollTop = el.scrollHeight;\n    }\n  }\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    const data = {\n      sender : username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false,\n    };\n\n    //here we are sending messages\n    socket.emit(\"send_message\",data);\n    \n    //Main Model: Generate a unique key for each pair of sender-receiver\n    //eg: sender: Koushan, receiver:Avirup => key: \"Avirup-Koushan\" (Sorted in alphabetical order and joined with a hiphen)\n    if(receiver!==\"public\")//Else unusual storage of data\n    {\n    const key = sortNames(username, receiver);\n    const tempGroupMessage = {...groupMessage};\n\n    if(key in tempGroupMessage)\n    {\n      tempGroupMessage[key] = [...tempGroupMessage[key], {...data, view: true}];\n    }\n    else{\n      tempGroupMessage[key] = [{...data, view:true}];\n    }\n\n    setGroupMessage({ ...tempGroupMessage });\n\n    if(media !== null){\n      setMedia(null);\n    }\n\n    setMessage(\"\");\n\n     console.log(groupMessage);\n\n     console.log(message);\n  }    \n  setMessage(\"\"); \n  };\n\n  useEffect(()=>{\n    socket.on(\"all_users\", (users) => {\n      console.log({users});\n      setUsers(users);\n    });\n\n    socket.on(\"offline_users\", (newoff) => {\n      //console.log({users});\n      setOffline(newoff);\n    });\n\n\n    socket.on(\"load_messages\", (oldMessages) => {\n      console.log(oldMessages);\n      setGroupMessage(oldMessages);\n    })\n\n    socket.on(\"new_message\", (data)=>{\n      console.log(data);\n\n       console.log({rec: receiverRef.current,data});\n\n      if(data.receiver === \"public\")\n      {\n        setGroupMessage((prevGroupMessage) => {\n          const messages = {...prevGroupMessage};\n          const key = \"public\";\n  \n          if(receiverRef.current === \"public\"){\n            data.view = true;\n          }\n  \n  \n          if(key in messages){\n            messages[key] = [...messages[key], data];\n          }\n          else{\n            messages[key] = [data];\n          }\n  \n          return {...messages};\n        })\n      }\n      else{\n\n      setGroupMessage((prevGroupMessage) => {\n        const messages = {...prevGroupMessage};\n        const key = sortNames(data.sender,data.receiver);\n\n        if(receiverRef.current === data.sender){\n          data.view = true;\n        }\n\n\n        if(key in messages){\n          messages[key] = [...messages[key], data];\n        }\n        else{\n          messages[key] = [data];\n        }\n\n        return {...messages};\n      })}\n    })\n  }, []);\n\n\n  useEffect(()=>{\n    //for updating view count of selected user(receiver)\n    updateViewMessage();\n  },[receiver]);\n\n  const updateViewMessage = ()=>{\n    let key;\n    if(receiver===\"public\"){\n    key=\"public\"}\n    else{\n    key = sortNames(username,receiver);\n    }\n    if(key in groupMessage){\n      const messages = groupMessage[key].map(msg => !msg.view ? {...msg, view:true} : msg);\n\n      groupMessage[key] = [...messages];\n\n      setGroupMessage({...groupMessage});\n    }\n  }\n\n  useEffect(() => {\n    let key;\n    if(receiver==\"public\")\n    key=\"public\"\n    else\n    key = sortNames(username,receiver);\n    if(key in groupMessage){\n      if(groupMessage[key].length > 0){\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]);\n\n  //console.log(groupMessage);\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <img src={logo} alt=\"Chatter-logo\" />\n        <div className=\"app-name\">Chatter</div>\n      </header>\n\n      <div className=\"chat-system\">\n        <div className=\"chat-box\">\n          {\n            /* step1 ask user name and password*/\n            step === 0 ? (\n              <CreateUser onCreateUser = {onCreateUser}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}/>) : null}\n          {/* step2 shoe all available users*/\n            step === 1 ? (\n              <OnlineUsers onUserSelect = {onUserSelect}\n              onPublicSelect = {onPublicSelect}\n              users = {users}\n              offline = {offline}\n              username = {username}\n              avatar = {avatar}\n              />\n            ) : null\n          }\n          {/* step3 select user and switch to chat window*/\n            step === 2 ? (\n              <MessagesControl\n              value = {message}\n              onChange =  {(e)=>setMessage(e.target.value)}\n              sendMessage = {sendMessage}\n              groupMessage = {groupMessage}\n              sortNames = {sortNames}\n              username = {username}\n              receiver = {receiver}\n              setMedia = {setMedia}\n              onChatClose={onChatClose}\n              media = {media}\n              avatar = {avatar}\n              />\n            ) : null\n          }\n          {/* step3 select user and switch to chat window*/\n            step === 3 ? (\n              <Public\n              value = {message}\n              onChange =  {(e)=>setMessage(e.target.value)}\n              sendMessage = {sendMessage}\n              groupMessage = {groupMessage}\n              sortNames = {sortNames}\n              username = {username}\n              receiver = {receiver}\n              setMedia = {setMedia}\n              onChatClose={onChatClose}\n              media = {media}\n              avatar = {avatar}\n              />\n            ) : null\n          }\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//54:14\n//1:06:00\n//2:14:56"]},"metadata":{},"sourceType":"module"}