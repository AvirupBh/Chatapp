[{"/home/avirup/chatapp/chat-app-master/inner/src/index.js":"1","/home/avirup/chatapp/chat-app-master/inner/src/reportWebVitals.js":"2","/home/avirup/chatapp/chat-app-master/inner/src/App.js":"3","/home/avirup/chatapp/chat-app-master/inner/src/components/CreateUser.js":"4","/home/avirup/chatapp/chat-app-master/inner/src/components/MessagesControl.js":"5","/home/avirup/chatapp/chat-app-master/inner/src/components/OnlineUsers.js":"6","/home/avirup/chatapp/chat-app-master/inner/src/components/Public.js":"7","/home/avirup/Chatapp/inner/src/index.js":"8","/home/avirup/Chatapp/inner/src/App.js":"9","/home/avirup/Chatapp/inner/src/reportWebVitals.js":"10","/home/avirup/Chatapp/inner/src/components/CreateUser.js":"11","/home/avirup/Chatapp/inner/src/components/MessagesControl.js":"12","/home/avirup/Chatapp/inner/src/components/OnlineUsers.js":"13","/home/avirup/Chatapp/inner/src/components/Public.js":"14"},{"size":500,"mtime":1646238205000,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1646238205000,"results":"17","hashOfConfig":"16"},{"size":7070,"mtime":1647110540759,"results":"18","hashOfConfig":"16"},{"size":382,"mtime":1647029291000,"results":"19","hashOfConfig":"16"},{"size":3745,"mtime":1647109305556,"results":"20","hashOfConfig":"16"},{"size":1754,"mtime":1647110317680,"results":"21","hashOfConfig":"16"},{"size":3918,"mtime":1647111122876,"results":"22","hashOfConfig":"16"},{"size":500,"mtime":1647111654000,"results":"23","hashOfConfig":"24"},{"size":6332,"mtime":1650780239089,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1647111654000,"results":"26","hashOfConfig":"24"},{"size":382,"mtime":1647111654000,"results":"27","hashOfConfig":"24"},{"size":3746,"mtime":1647450811612,"results":"28","hashOfConfig":"24"},{"size":1665,"mtime":1647451160381,"results":"29","hashOfConfig":"24"},{"size":3891,"mtime":1647450891538,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r62kxc",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kcy4un",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"/home/avirup/chatapp/chat-app-master/inner/src/index.js",[],[],"/home/avirup/chatapp/chat-app-master/inner/src/reportWebVitals.js",[],[],"/home/avirup/chatapp/chat-app-master/inner/src/App.js",["76","77","78"],[],"/home/avirup/chatapp/chat-app-master/inner/src/components/CreateUser.js",[],[],"/home/avirup/chatapp/chat-app-master/inner/src/components/MessagesControl.js",["79","80","81"],[],"/home/avirup/chatapp/chat-app-master/inner/src/components/OnlineUsers.js",["82"],[],"/home/avirup/chatapp/chat-app-master/inner/src/components/Public.js",["83","84","85","86"],[],"/home/avirup/Chatapp/inner/src/index.js",[],[],"/home/avirup/Chatapp/inner/src/App.js",["87","88"],[],"/home/avirup/Chatapp/inner/src/reportWebVitals.js",[],[],"/home/avirup/Chatapp/inner/src/components/CreateUser.js",[],[],"/home/avirup/Chatapp/inner/src/components/MessagesControl.js",["89","90","91"],[],"import sendIcon from \"../assets/send.png\"\nimport attachment from '../assets/paper-clip.png';\nimport cancel from \"../assets/cancel.png\"\nimport image from \"../assets/image.png\"\n\nexport default function MessagesControl(props) {\n\n  const { \n    sendMessage, \n    value, \n    onChange, \n    groupMessage, \n    sortNames, \n    username, \n    receiver, \n    setMedia, \n    onChatClose,\n    media,\n    avatar\n  } = props;\n\n  const messages = groupMessage ? groupMessage[sortNames(username, receiver)] : [];\n\n  return (\n    <div>\n\n<div>\n      <header className=\"user-header\">\n      <img src={require(`../users/${avatar}`)} />\n        <div className=\"app-name\">{username}</div>\n      </header>\n      </div>\n      <div className='online-users-header'>\n        <div style={{ margin: \"0 10px\" , cursor:\"pointer\"}}>{receiver}</div>\n        <div style = {{margin:\"0 10px\"}}>\n          <img onClick={onChatClose} width = \"10px\" src={cancel} alt=\"close\"/>\n        </div>\n      </div>\n      <div className='message-area'>\n        <ul>\n          <>\n            {\n              messages && messages.length > 0 ? messages.map((msg, index) => (\n                <li style={{\n                  flexDirection : username===msg.receiver ? \"row\" : \"row-reverse\",\n                }} key={index}>\n\n                  {\n                  msg.message !== \"\" || msg.media ? (<div className='user-pic'>\n                    <img src={require(`../users/${msg.avatar}`)} />\n                  </div>) : null\n                  }\n                  \n                  <div>\n\n                    {\n                      \n                      msg.media && msg.media.image ? \n                      (  \n                      <div className=\"image-container\">\n                        <img src = {msg.media.content} width=\"250\" alt=\"\"/>\n                        </div>) : null}\n\n                  {msg.message !== \"\" ? (<div className='message-text'>{msg.message}</div> ): null}\n                  </div>\n\n                </li>)) : null\n            }\n          </>\n        </ul>\n      </div>\n      <div>\n        {\n          media !== null ? (<div className=\"attachment-display\">\n          <img src={image} alt={\"\"}/>\n          <span className=\"attachment-name\">{media.name}</span>\n          <span className=\"remove-attachment\" onClick={() => {\n            setMedia(null);\n          }}>Ã—</span>\n        </div>) : null\n        }\n      <form onSubmit={sendMessage} className='message-control'>\n        <textarea value={value} onChange={onChange} placeholder='Type your message...' />\n        <div className='file-input-container'>\n          <input type=\"file\" onChange={(e) => {\n            const file = e.target.files[0];\n            console.log(file);\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function () {\n              //console.log(reader.result);\n              setMedia({\n                image: true,\n                content: reader.result,\n                name: file.name,\n              });\n            };\n            reader.onerror = function (error) {\n              console.log(error);\n            };\n          }} id='hidden-file' />\n          <label htmlFor=\"hidden-file\">\n            <img width={28} src={attachment} alt=\"\" />\n          </label>\n        </div>\n        <button>\n          <img src={sendIcon} />\n          <span style={{ display: \"inline-block\" }}>\n            Send\n          </span>\n        </button>\n      </form>\n      </div>\n      \n    </div>\n  )\n}\n\n/**/\n\n//  TODO: Press enter to send messages\n//  implement login/register screen\n//  store passwords for users\n//  implement public chat\n//  public chat should display each message sender name\n//  optional: implement date/time for each messaage\n","/home/avirup/Chatapp/inner/src/components/OnlineUsers.js",["92"],[],"\nexport default function OnlineUsers(props) {\n  const { onUserSelect,onPublicSelect, users, offline, username ,avatar} = props;\n  return (\n  \n    <div>\n      <div>\n      <header className=\"user-header\">\n      <img src={require(`../users/${avatar}`)} />\n        <div className=\"app-name\">{username}</div>\n      </header>\n      </div>\n      <div className='online-users-header'>\n        <div style={{ margin: \"0 10px\" }}>Online Users</div>\n      </div>\n\n      <ul className='users-list'>\n        \n        {users && Object.keys(users).map(user => (\n          <>\n            {\n              user !== username ? (\n              <li key={user} onClick={() => onUserSelect( user )}>\n                <span>{user}</span>\n                \n              </li>) : null\n            }\n          </>\n        ))}\n\n      </ul>\n      <div className='online-users-header'  style={{margin: \"20px 0px\"}}>\n        <div style={{ margin: \"0 10px\" }}>Offline Users</div>\n      </div>\n\n      <ul className='users-list'>\n        \n        {offline && Object.keys(offline).map(user => (\n          <>\n            {\n              user !== username ? (\n              <li key={user} onClick={() => onUserSelect( user )}>\n                <span>{user}</span>\n               \n              </li>) : null\n            }\n          </>\n        ))}\n\n      </ul>\n      <div className='online-users-header' style={{margin: \"20px 0px\"}}>\n        <div style={{ margin: \"0 10px\" }}>Public Room</div>\n      </div>\n\n      <ul className='users-list'>\n        <li key={\"public\"} onClick={() => onPublicSelect()}>\n        <span >{\"Public Chat\"}</span>\n                \n        </li>\n        </ul>\n    </div>\n  );\n};\n","/home/avirup/Chatapp/inner/src/components/Public.js",["93","94","95","96"],[],"import sendIcon from \"../assets/send.png\"\nimport attachment from '../assets/paper-clip.png';\nimport cancel from \"../assets/cancel.png\"\nimport image from \"../assets/image.png\"\n\nexport default function Public(props) {\n\n  const { \n    sendMessage, \n    value, \n    onChange, \n    groupMessage, \n    sortNames, \n    username, \n    receiver, \n    setMedia, \n    onChatClose,\n    media,\n    avatar\n  } = props;\n\n  const messages = groupMessage ? groupMessage[\"public\"] : [];\n\n  return (\n    <div>\n    <div>\n    <header className=\"user-header\">\n    <img src={require(`../users/${avatar}`)} />\n      <div className=\"app-name\">{username}</div>\n    </header>\n    </div>\n\n      <div className='online-users-header'>\n        <div style={{ margin: \"0 10px\" , cursor:\"pointer\"}}>{receiver}</div>\n        <div style = {{margin:\"0 10px\"}}>\n          <img onClick={onChatClose} width = \"10px\" src={cancel} alt=\"close\"/>\n        </div>\n      </div>\n      <div className='message-area'>\n        <ul>\n          <>\n            {\n              messages && messages.length > 0 ? messages.map((msg, index) => (\n                <li style={{\n                  flexDirection : username!==msg.sender ? \"row\" : \"row-reverse\",\n                }} key={index}>\n\n                  {\n                  msg.message !== \"\" || msg.media ? (<div className='user-pic'>\n                    <img src={require(`../users/${msg.avatar}`)} />\n                  </div>) : null\n                  }\n                  \n                  <div>\n                    {/* <div className=\"disp\"> */}\n                    <div className=\"user-id\">{msg.sender===username?\"Me : \":msg.sender+\"  :  \"}</div>\n                    {\n                      \n                      msg.media && msg.media.image ? \n                      (  \n                      <div className=\"image-container\">\n                        <img src = {msg.media.content} width=\"250\" alt=\"\"/>\n                        </div>) : null}\n                        {msg.message !== \"\" ? (<div className='message-text'>{msg.message}</div> ): null}     \n                    \n                  </div>\n\n                </li>)) : null\n            }\n          </>\n        </ul>\n      </div>\n      <div>\n        {\n          media !== null ? (<div className=\"attachment-display\">\n          <img src={image} alt={\"\"}/>\n          <span className=\"attachment-name\">{media.name}</span>\n          <span className=\"remove-attachment\" onClick={() => {\n            setMedia(null);\n          }}>Ã—</span>\n        </div>) : null\n        }\n      <form onSubmit={sendMessage} className='message-control'>\n        <textarea value={value} onChange={onChange} placeholder='Type your message...' />\n        <div className='file-input-container'>\n          <input type=\"file\" onChange={(e) => {\n            const file = e.target.files[0];\n            console.log(file);\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function () {\n              //console.log(reader.result);\n              setMedia({\n                image: true,\n                content: reader.result,\n                name: file.name,\n              });\n            };\n            reader.onerror = function (error) {\n              console.log(error);\n            };\n          }} id='hidden-file' />\n          <label htmlFor=\"hidden-file\">\n            <img width={28} src={attachment} alt=\"\" />\n          </label>\n        </div>\n        <button>\n          <img src={sendIcon} />\n          <span style={{ display: \"inline-block\" }}>\n            Send\n          </span>\n        </button>\n      </form>\n      </div>\n      \n    </div>\n  )\n}\n\n/**/\n\n//  TODO: Press enter to send messages\n//  implement login/register screen\n//  store passwords for users\n//  implement public chat\n//  public chat should display each message sender name\n//  optional: implement date/time for each messaage\n",{"ruleId":"97","severity":1,"message":"98","line":181,"column":5,"nodeType":"99","endLine":181,"endColumn":15,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":201,"column":16,"nodeType":"103","messageId":"104","endLine":201,"endColumn":18},{"ruleId":"97","severity":1,"message":"105","line":210,"column":6,"nodeType":"99","endLine":210,"endColumn":20,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":29,"column":7,"nodeType":"109","endLine":29,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":50,"column":21,"nodeType":"109","endLine":50,"endColumn":68},{"ruleId":"107","severity":1,"message":"108","line":106,"column":11,"nodeType":"109","endLine":106,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":9,"column":7,"nodeType":"109","endLine":9,"endColumn":50},{"ruleId":"110","severity":1,"message":"111","line":13,"column":5,"nodeType":"112","messageId":"113","endLine":13,"endColumn":14},{"ruleId":"107","severity":1,"message":"108","line":28,"column":5,"nodeType":"109","endLine":28,"endColumn":48},{"ruleId":"107","severity":1,"message":"108","line":50,"column":21,"nodeType":"109","endLine":50,"endColumn":68},{"ruleId":"107","severity":1,"message":"108","line":109,"column":11,"nodeType":"109","endLine":109,"endColumn":33},{"ruleId":"101","severity":1,"message":"102","line":172,"column":16,"nodeType":"103","messageId":"104","endLine":172,"endColumn":18},{"ruleId":"97","severity":1,"message":"105","line":181,"column":6,"nodeType":"99","endLine":181,"endColumn":20,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"108","line":29,"column":7,"nodeType":"109","endLine":29,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":50,"column":21,"nodeType":"109","endLine":50,"endColumn":68},{"ruleId":"107","severity":1,"message":"108","line":107,"column":11,"nodeType":"109","endLine":107,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":9,"column":7,"nodeType":"109","endLine":9,"endColumn":50},{"ruleId":"110","severity":1,"message":"111","line":13,"column":5,"nodeType":"112","messageId":"113","endLine":13,"endColumn":14},{"ruleId":"107","severity":1,"message":"108","line":28,"column":5,"nodeType":"109","endLine":28,"endColumn":48},{"ruleId":"107","severity":1,"message":"108","line":50,"column":21,"nodeType":"109","endLine":50,"endColumn":68},{"ruleId":"107","severity":1,"message":"108","line":108,"column":11,"nodeType":"109","endLine":108,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateViewMessage'. Either include it or remove the dependency array.","ArrayExpression",["115"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'receiver' and 'username'. Either include them or remove the dependency array.",["116"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'sortNames' is assigned a value but never used.","Identifier","unusedVar",["117"],{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},"Update the dependencies array to be: [receiver, updateViewMessage]",{"range":"123","text":"124"},"Update the dependencies array to be: [groupMessage, receiver, username]",{"range":"125","text":"126"},{"range":"127","text":"126"},[4262,4272],"[receiver, updateViewMessage]",[4879,4893],"[groupMessage, receiver, username]",[4141,4155]]